---
title: Homework 7 - Creating a resume database
author: ISABELLA LARKIN
date: 11/12/23
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-ELJEFEXIRL

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'CMSC508_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The database is like a big organizer for a company's staff. It has a table for skills where stuff like plumbing and painting are listed with details. Then there's a table for all the employees, where you can find their names, emails, and even their LinkedIn profiles. Another table connects which employee knows what skills, and there's also one for different job roles in the company, like Designer or Developer. Finally, there's a table that shows who does what job and when they started it. So basically, it's all about who works at the company, what they can do, and what their job is.

## Crows-foot diagram

THE READER IS SEEING A VISUAL MAP OF THE RESUME DATABAS WE ARE BUILDING IN THIS ASSIGNMENT

<center>
:::: {.columns}

::: {.column}
```{mermaid}
erDiagram
    PEOPLE ||--o{ PEOPLESKILLS : "has"
    SKILLS ||--o{ PEOPLESKILLS : "included_in"
    PEOPLE ||--o{ PEOPLEROLES : "occupies"
    ROLES ||--o{ PEOPLEROLES : "assigned_to"
    PEOPLE {
        int id 
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    SKILLS {
        int id 
        string name
        string description
        string tag
        string url
        string time_commitment
    }
    PEOPLESKILLS {
        int id 
        int skills_id 
        int people_id 
        date date_acquired
    }
    ROLES {
        int id 
        string name
        int sort_priority
    }
    PEOPLEROLES {
        int id 
        int people_id 
        int role_id 
        date date_role_acquired
    }
```
:::
::: {.column}



## Examples of data in the database

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.
IT SAYS MY PEOPLE TABLE DOESNT EXIST BUT I LITERALLY SEE IT IN PHP MY ADMIN.. LIKE HUH
```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```



### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
SELECT first_name, last_name, email 
FROM people 
ORDER BY last_name;


### List skill names of Person 1
SELECT s.name 
FROM skills s 
JOIN peopleskills ps ON s.id = ps.skills_id 
WHERE ps.people_id = 1;


### List people names with Skill 6
SELECT p.first_name, p.last_name 
FROM people p 
JOIN peopleskills ps ON p.id = ps.people_id 
WHERE ps.skills_id = 6;


### List people with a DEVELOPER role
SELECT p.first_name, p.last_name 
FROM people p 
JOIN people_roles pr ON p.id = pr.people_id 
JOIN roles r ON pr.role_id = r.id 
WHERE r.name = 'Developer';


### List names and email addresses of people without skills
SELECT p.first_name, p.last_name, p.email 
FROM people p 
LEFT JOIN peopleskills ps ON p.id = ps.people_id 
WHERE ps.id IS NULL;


### List names and tags of unused skills
SELECT s.name, s.tag 
FROM skills s 
LEFT JOIN peopleskills ps ON s.id = ps.skills_id 
WHERE ps.id IS NULL;


### List people names and skill names with the BOSS role
SELECT p.first_name, p.last_name, s.name AS skill_name 
FROM people p 
JOIN people_roles pr ON p.id = pr.people_id 
JOIN roles r ON pr.role_id = r.id 
JOIN peopleskills ps ON p.id = ps.people_id 
JOIN skills s ON ps.skills_id = s.id 
WHERE r.name = 'Boss';


### List ids and names of unused roles
SELECT r.id, r.name 
FROM roles r 
LEFT JOIN people_roles pr ON r.id = pr.role_id 
WHERE pr.id IS NULL;


## Reflection

To be honest this assignment was a little confusing becasuse i did not understand how to run my ddl sql code on my active connection i vs code so i just did it piece by piece in php my admin. Also my active connection was just not cooperating with me, but i kinda fiex it in the end. HW 6 and 7 are a lil weird to me because im so used to doing everything in php my admin or on paper. But I am adapting.